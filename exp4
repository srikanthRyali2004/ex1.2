{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlywnsKPSML5S83XhkwF4L",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/srikanthRyali2004/ex1.2/blob/main/exp4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "FNC3MHCSTJAp",
        "outputId": "05012155-42d8-44ce-aff5-6d510544cd22"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           id             date      price  bedrooms  bathrooms  sqft_living  \\\n",
              "0  7129300520  20141013T000000   221900.0         3       1.00         1180   \n",
              "1  6414100192  20141209T000000   538000.0         3       2.25         2570   \n",
              "2  5631500400  20150225T000000   180000.0         2       1.00          770   \n",
              "3  2487200875  20141209T000000   604000.0         4       3.00         1960   \n",
              "4  1954400510  20150218T000000   510000.0         3       2.00         1680   \n",
              "5  7237550310  20140512T000000  1225000.0         4       4.50         5420   \n",
              "6  1321400060  20140627T000000   257500.0         3       2.25         1715   \n",
              "7  2008000270  20150115T000000   291850.0         3       1.50         1060   \n",
              "8  2414600126  20150415T000000   229500.0         3       1.00         1780   \n",
              "9  3793500160  20150312T000000   323000.0         3       2.50         1890   \n",
              "\n",
              "   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n",
              "0      5650     1.0           0     0  ...      7      1180.0              0   \n",
              "1      7242     2.0           0     0  ...      7      2170.0            400   \n",
              "2     10000     1.0           0     0  ...      6       770.0              0   \n",
              "3      5000     1.0           0     0  ...      7      1050.0            910   \n",
              "4      8080     1.0           0     0  ...      8      1680.0              0   \n",
              "5    101930     1.0           0     0  ...     11      3890.0           1530   \n",
              "6      6819     2.0           0     0  ...      7      1715.0              0   \n",
              "7      9711     1.0           0     0  ...      7      1060.0              0   \n",
              "8      7470     1.0           0     0  ...      7      1050.0            730   \n",
              "9      6560     2.0           0     0  ...      7      1890.0              0   \n",
              "\n",
              "   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n",
              "0      1955             0    98178  47.5112 -122.257           1340   \n",
              "1      1951          1991    98125  47.7210 -122.319           1690   \n",
              "2      1933             0    98028  47.7379 -122.233           2720   \n",
              "3      1965             0    98136  47.5208 -122.393           1360   \n",
              "4      1987             0    98074  47.6168 -122.045           1800   \n",
              "5      2001             0    98053  47.6561 -122.005           4760   \n",
              "6      1995             0    98003  47.3097 -122.327           2238   \n",
              "7      1963             0    98198  47.4095 -122.315           1650   \n",
              "8      1960             0    98146  47.5123 -122.337           1780   \n",
              "9      2003             0    98038  47.3684 -122.031           2390   \n",
              "\n",
              "   sqft_lot15  \n",
              "0        5650  \n",
              "1        7639  \n",
              "2        8062  \n",
              "3        5000  \n",
              "4        7503  \n",
              "5      101930  \n",
              "6        6819  \n",
              "7        9711  \n",
              "8        8113  \n",
              "9        7570  \n",
              "\n",
              "[10 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-282200f0-28d3-4597-8498-65573cad4876\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>date</th>\n",
              "      <th>price</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>sqft_living</th>\n",
              "      <th>sqft_lot</th>\n",
              "      <th>floors</th>\n",
              "      <th>waterfront</th>\n",
              "      <th>view</th>\n",
              "      <th>...</th>\n",
              "      <th>grade</th>\n",
              "      <th>sqft_above</th>\n",
              "      <th>sqft_basement</th>\n",
              "      <th>yr_built</th>\n",
              "      <th>yr_renovated</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>sqft_living15</th>\n",
              "      <th>sqft_lot15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7129300520</td>\n",
              "      <td>20141013T000000</td>\n",
              "      <td>221900.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1180</td>\n",
              "      <td>5650</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1180.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1955</td>\n",
              "      <td>0</td>\n",
              "      <td>98178</td>\n",
              "      <td>47.5112</td>\n",
              "      <td>-122.257</td>\n",
              "      <td>1340</td>\n",
              "      <td>5650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6414100192</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>538000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>2570</td>\n",
              "      <td>7242</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>2170.0</td>\n",
              "      <td>400</td>\n",
              "      <td>1951</td>\n",
              "      <td>1991</td>\n",
              "      <td>98125</td>\n",
              "      <td>47.7210</td>\n",
              "      <td>-122.319</td>\n",
              "      <td>1690</td>\n",
              "      <td>7639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5631500400</td>\n",
              "      <td>20150225T000000</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>770</td>\n",
              "      <td>10000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>770.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1933</td>\n",
              "      <td>0</td>\n",
              "      <td>98028</td>\n",
              "      <td>47.7379</td>\n",
              "      <td>-122.233</td>\n",
              "      <td>2720</td>\n",
              "      <td>8062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2487200875</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>604000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1960</td>\n",
              "      <td>5000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050.0</td>\n",
              "      <td>910</td>\n",
              "      <td>1965</td>\n",
              "      <td>0</td>\n",
              "      <td>98136</td>\n",
              "      <td>47.5208</td>\n",
              "      <td>-122.393</td>\n",
              "      <td>1360</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1954400510</td>\n",
              "      <td>20150218T000000</td>\n",
              "      <td>510000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1680</td>\n",
              "      <td>8080</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1987</td>\n",
              "      <td>0</td>\n",
              "      <td>98074</td>\n",
              "      <td>47.6168</td>\n",
              "      <td>-122.045</td>\n",
              "      <td>1800</td>\n",
              "      <td>7503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7237550310</td>\n",
              "      <td>20140512T000000</td>\n",
              "      <td>1225000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4.50</td>\n",
              "      <td>5420</td>\n",
              "      <td>101930</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>11</td>\n",
              "      <td>3890.0</td>\n",
              "      <td>1530</td>\n",
              "      <td>2001</td>\n",
              "      <td>0</td>\n",
              "      <td>98053</td>\n",
              "      <td>47.6561</td>\n",
              "      <td>-122.005</td>\n",
              "      <td>4760</td>\n",
              "      <td>101930</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1321400060</td>\n",
              "      <td>20140627T000000</td>\n",
              "      <td>257500.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>1715</td>\n",
              "      <td>6819</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1715.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1995</td>\n",
              "      <td>0</td>\n",
              "      <td>98003</td>\n",
              "      <td>47.3097</td>\n",
              "      <td>-122.327</td>\n",
              "      <td>2238</td>\n",
              "      <td>6819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2008000270</td>\n",
              "      <td>20150115T000000</td>\n",
              "      <td>291850.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.50</td>\n",
              "      <td>1060</td>\n",
              "      <td>9711</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1060.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1963</td>\n",
              "      <td>0</td>\n",
              "      <td>98198</td>\n",
              "      <td>47.4095</td>\n",
              "      <td>-122.315</td>\n",
              "      <td>1650</td>\n",
              "      <td>9711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2414600126</td>\n",
              "      <td>20150415T000000</td>\n",
              "      <td>229500.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1780</td>\n",
              "      <td>7470</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050.0</td>\n",
              "      <td>730</td>\n",
              "      <td>1960</td>\n",
              "      <td>0</td>\n",
              "      <td>98146</td>\n",
              "      <td>47.5123</td>\n",
              "      <td>-122.337</td>\n",
              "      <td>1780</td>\n",
              "      <td>8113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3793500160</td>\n",
              "      <td>20150312T000000</td>\n",
              "      <td>323000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.50</td>\n",
              "      <td>1890</td>\n",
              "      <td>6560</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1890.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2003</td>\n",
              "      <td>0</td>\n",
              "      <td>98038</td>\n",
              "      <td>47.3684</td>\n",
              "      <td>-122.031</td>\n",
              "      <td>2390</td>\n",
              "      <td>7570</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-282200f0-28d3-4597-8498-65573cad4876')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-282200f0-28d3-4597-8498-65573cad4876 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-282200f0-28d3-4597-8498-65573cad4876');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97d458c3-5d76-46f4-b05e-b49440a9367a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97d458c3-5d76-46f4-b05e-b49440a9367a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97d458c3-5d76-46f4-b05e-b49440a9367a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "# Read the dataset into a DataFrame\n",
        "df = pd.read_csv(\"/content/kc_house_data.csv\")\n",
        "# Display the first few rows of the DataFrame\n",
        "df.head(10)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "# Read the dataset into a DataFrame\n",
        "df = pd.read_csv(\"/content/kc_house_data.csv\")\n",
        "# Display the first few rows of the DataFrame\n",
        "df.head(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "dDpgx-CFUqIb",
        "outputId": "a540f354-ed2f-4fd4-9fd0-fb1a819e4938"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           id             date      price  bedrooms  bathrooms  sqft_living  \\\n",
              "0  7129300520  20141013T000000   221900.0         3       1.00         1180   \n",
              "1  6414100192  20141209T000000   538000.0         3       2.25         2570   \n",
              "2  5631500400  20150225T000000   180000.0         2       1.00          770   \n",
              "3  2487200875  20141209T000000   604000.0         4       3.00         1960   \n",
              "4  1954400510  20150218T000000   510000.0         3       2.00         1680   \n",
              "5  7237550310  20140512T000000  1225000.0         4       4.50         5420   \n",
              "6  1321400060  20140627T000000   257500.0         3       2.25         1715   \n",
              "7  2008000270  20150115T000000   291850.0         3       1.50         1060   \n",
              "8  2414600126  20150415T000000   229500.0         3       1.00         1780   \n",
              "9  3793500160  20150312T000000   323000.0         3       2.50         1890   \n",
              "\n",
              "   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n",
              "0      5650     1.0           0     0  ...      7      1180.0              0   \n",
              "1      7242     2.0           0     0  ...      7      2170.0            400   \n",
              "2     10000     1.0           0     0  ...      6       770.0              0   \n",
              "3      5000     1.0           0     0  ...      7      1050.0            910   \n",
              "4      8080     1.0           0     0  ...      8      1680.0              0   \n",
              "5    101930     1.0           0     0  ...     11      3890.0           1530   \n",
              "6      6819     2.0           0     0  ...      7      1715.0              0   \n",
              "7      9711     1.0           0     0  ...      7      1060.0              0   \n",
              "8      7470     1.0           0     0  ...      7      1050.0            730   \n",
              "9      6560     2.0           0     0  ...      7      1890.0              0   \n",
              "\n",
              "   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n",
              "0      1955             0    98178  47.5112 -122.257           1340   \n",
              "1      1951          1991    98125  47.7210 -122.319           1690   \n",
              "2      1933             0    98028  47.7379 -122.233           2720   \n",
              "3      1965             0    98136  47.5208 -122.393           1360   \n",
              "4      1987             0    98074  47.6168 -122.045           1800   \n",
              "5      2001             0    98053  47.6561 -122.005           4760   \n",
              "6      1995             0    98003  47.3097 -122.327           2238   \n",
              "7      1963             0    98198  47.4095 -122.315           1650   \n",
              "8      1960             0    98146  47.5123 -122.337           1780   \n",
              "9      2003             0    98038  47.3684 -122.031           2390   \n",
              "\n",
              "   sqft_lot15  \n",
              "0        5650  \n",
              "1        7639  \n",
              "2        8062  \n",
              "3        5000  \n",
              "4        7503  \n",
              "5      101930  \n",
              "6        6819  \n",
              "7        9711  \n",
              "8        8113  \n",
              "9        7570  \n",
              "\n",
              "[10 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-63469b91-a9b0-4f53-8ea3-890ceb865e4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>date</th>\n",
              "      <th>price</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>sqft_living</th>\n",
              "      <th>sqft_lot</th>\n",
              "      <th>floors</th>\n",
              "      <th>waterfront</th>\n",
              "      <th>view</th>\n",
              "      <th>...</th>\n",
              "      <th>grade</th>\n",
              "      <th>sqft_above</th>\n",
              "      <th>sqft_basement</th>\n",
              "      <th>yr_built</th>\n",
              "      <th>yr_renovated</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>sqft_living15</th>\n",
              "      <th>sqft_lot15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7129300520</td>\n",
              "      <td>20141013T000000</td>\n",
              "      <td>221900.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1180</td>\n",
              "      <td>5650</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1180.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1955</td>\n",
              "      <td>0</td>\n",
              "      <td>98178</td>\n",
              "      <td>47.5112</td>\n",
              "      <td>-122.257</td>\n",
              "      <td>1340</td>\n",
              "      <td>5650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6414100192</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>538000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>2570</td>\n",
              "      <td>7242</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>2170.0</td>\n",
              "      <td>400</td>\n",
              "      <td>1951</td>\n",
              "      <td>1991</td>\n",
              "      <td>98125</td>\n",
              "      <td>47.7210</td>\n",
              "      <td>-122.319</td>\n",
              "      <td>1690</td>\n",
              "      <td>7639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5631500400</td>\n",
              "      <td>20150225T000000</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>770</td>\n",
              "      <td>10000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>770.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1933</td>\n",
              "      <td>0</td>\n",
              "      <td>98028</td>\n",
              "      <td>47.7379</td>\n",
              "      <td>-122.233</td>\n",
              "      <td>2720</td>\n",
              "      <td>8062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2487200875</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>604000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1960</td>\n",
              "      <td>5000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050.0</td>\n",
              "      <td>910</td>\n",
              "      <td>1965</td>\n",
              "      <td>0</td>\n",
              "      <td>98136</td>\n",
              "      <td>47.5208</td>\n",
              "      <td>-122.393</td>\n",
              "      <td>1360</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1954400510</td>\n",
              "      <td>20150218T000000</td>\n",
              "      <td>510000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1680</td>\n",
              "      <td>8080</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1987</td>\n",
              "      <td>0</td>\n",
              "      <td>98074</td>\n",
              "      <td>47.6168</td>\n",
              "      <td>-122.045</td>\n",
              "      <td>1800</td>\n",
              "      <td>7503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7237550310</td>\n",
              "      <td>20140512T000000</td>\n",
              "      <td>1225000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4.50</td>\n",
              "      <td>5420</td>\n",
              "      <td>101930</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>11</td>\n",
              "      <td>3890.0</td>\n",
              "      <td>1530</td>\n",
              "      <td>2001</td>\n",
              "      <td>0</td>\n",
              "      <td>98053</td>\n",
              "      <td>47.6561</td>\n",
              "      <td>-122.005</td>\n",
              "      <td>4760</td>\n",
              "      <td>101930</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1321400060</td>\n",
              "      <td>20140627T000000</td>\n",
              "      <td>257500.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>1715</td>\n",
              "      <td>6819</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1715.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1995</td>\n",
              "      <td>0</td>\n",
              "      <td>98003</td>\n",
              "      <td>47.3097</td>\n",
              "      <td>-122.327</td>\n",
              "      <td>2238</td>\n",
              "      <td>6819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2008000270</td>\n",
              "      <td>20150115T000000</td>\n",
              "      <td>291850.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.50</td>\n",
              "      <td>1060</td>\n",
              "      <td>9711</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1060.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1963</td>\n",
              "      <td>0</td>\n",
              "      <td>98198</td>\n",
              "      <td>47.4095</td>\n",
              "      <td>-122.315</td>\n",
              "      <td>1650</td>\n",
              "      <td>9711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2414600126</td>\n",
              "      <td>20150415T000000</td>\n",
              "      <td>229500.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1780</td>\n",
              "      <td>7470</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050.0</td>\n",
              "      <td>730</td>\n",
              "      <td>1960</td>\n",
              "      <td>0</td>\n",
              "      <td>98146</td>\n",
              "      <td>47.5123</td>\n",
              "      <td>-122.337</td>\n",
              "      <td>1780</td>\n",
              "      <td>8113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3793500160</td>\n",
              "      <td>20150312T000000</td>\n",
              "      <td>323000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.50</td>\n",
              "      <td>1890</td>\n",
              "      <td>6560</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1890.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2003</td>\n",
              "      <td>0</td>\n",
              "      <td>98038</td>\n",
              "      <td>47.3684</td>\n",
              "      <td>-122.031</td>\n",
              "      <td>2390</td>\n",
              "      <td>7570</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63469b91-a9b0-4f53-8ea3-890ceb865e4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-63469b91-a9b0-4f53-8ea3-890ceb865e4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-63469b91-a9b0-4f53-8ea3-890ceb865e4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fc1dcfb4-62a5-4ec5-aff1-6a09e6b6e146\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc1dcfb4-62a5-4ec5-aff1-6a09e6b6e146')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fc1dcfb4-62a5-4ec5-aff1-6a09e6b6e146 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize=(12,6))\n",
        "sqft = fig.add_subplot(121) # Subplot for square footage histogram\n",
        "cost = fig.add_subplot(122) # Subplot for housing prices histogram\n",
        "# Plot the histogram for square footage\n",
        "sqft.hist(df.sqft_living,bins=80)\n",
        "sqft.set_xlabel('Ft^2')\n",
        "sqft.set_title(\"Histogram of House Square Footage\")\n",
        "# Plot the histogram for housing prices\n",
        "cost.hist(df.price, bins=80)\n",
        "cost.set_xlabel('Price ($)')\n",
        "cost.set_title(\"Histogram of\")\n",
        "# Show the histograms\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "xt1zpZkPVfaL",
        "outputId": "9c519906-1fb7-487e-e6c7-162438dcb7dd"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m = ols('price ~ sqft_living',df).fit()\n",
        "print(m.summary())\n",
        "# Plot a jointplot with a regression line using seaborn\n",
        "sns.jointplot(x=\"sqft_living\",y=\"price\",data=df, kind='reg',height=5)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 975
        },
        "id": "OMYj9KQXVw2M",
        "outputId": "fba1a8f5-1938-44be-92f1-0280e736021e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                  price   R-squared:                       0.493\n",
            "Model:                            OLS   Adj. R-squared:                  0.493\n",
            "Method:                 Least Squares   F-statistic:                 2.100e+04\n",
            "Date:                Wed, 06 Mar 2024   Prob (F-statistic):               0.00\n",
            "Time:                        05:59:20   Log-Likelihood:            -3.0027e+05\n",
            "No. Observations:               21613   AIC:                         6.005e+05\n",
            "Df Residuals:                   21611   BIC:                         6.006e+05\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "===============================================================================\n",
            "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------\n",
            "Intercept   -4.358e+04   4402.690     -9.899      0.000   -5.22e+04    -3.5e+04\n",
            "sqft_living   280.6236      1.936    144.920      0.000     276.828     284.419\n",
            "==============================================================================\n",
            "Omnibus:                    14832.490   Durbin-Watson:                   1.983\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           546444.713\n",
            "Skew:                           2.824   Prob(JB):                         0.00\n",
            "Kurtosis:                      26.977   Cond. No.                     5.63e+03\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 5.63e+03. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 3 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}